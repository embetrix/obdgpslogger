# data file for the Fltk User Interface Designer (fluid)
version 1.0300 
header_name {.h} 
code_name {.cxx}
decl {\#include <stdlib.h>} {} 

decl {\#include <string.h>} {} 

decl {\#include <math.h>} {} 

decl {\#include <fftw3.h>} {public
} 

decl {\#include <FL/Fl.H>} {public
} 

decl {\#include <FL/Fl_Chart.H>} {public
} 

decl {\#include <FL/Fl_File_Chooser.H>} {} 

decl {\#include "sqlite3.h"} {public
} 

declblock {\#ifndef max} {open after {\#endif}
} {
  decl {\#define max(a,b) ((a)>(b)?(a):(b))} {}
} 

class FFTOBD {open
} {
  decl {sqlite3 *db;} {}
  decl {fftw_complex *rawdata;} {}
  decl {fftw_complex *plotdata;} {}
  decl {fftw_complex *transformeddata;} {}
  decl {int dataitems; // Number of items allocated in rawdata} {}
  decl {int plans_prepared;} {}
  decl {fftw_plan ff_forward;} {}
  decl {fftw_plan ff_backward;} {}
  Function {FFTOBD()} {open
  } {
    Fl_Window mainwindow {
      label FFTOBD open
      xywh {94 200 815 635} type Double resizable visible
    } {
      Fl_Group {} {open
        xywh {0 -5 815 635} resizable
      } {
        Fl_Menu_Bar {} {open
          xywh {0 0 815 25}
        } {
          Submenu {} {
            label {&File} open
            xywh {0 0 100 20} labelsize 14
          } {
            MenuItem {} {
              label {&Open DB}
              callback {Fl_File_Chooser f(".",
	"OBDGPS Logfiles (*.db)\\tAll Files (*)",
	Fl_File_Chooser::SINGLE, "Choose OBD GPS Logfile" );
f.show();
while(f.shown()) {
	Fl::check();
}
if(0 >= f.count())
	return;

if(0 != opendb(f.value())) {
	// Error
}}
              xywh {0 0 100 20} labelsize 14
            }
            MenuItem {} {
              label {Open CSV}
              callback {Fl_File_Chooser f(".",
	"Single Column data (*.csv)\\tAll Files (*)",
	Fl_File_Chooser::SINGLE, "Choose CSV file" );
f.show();
while(f.shown()) {
	Fl::check();
}
if(0 >= f.count())
	return;

if(0 != opencsv(f.value())) {
	// Error
}}
              xywh {0 0 100 20} labelsize 14
            }
            MenuItem {} {
              label {&Save}
              callback {Fl_File_Chooser f(".",
	"Single Column data (*.csv)\\tAll Files (*)",
	Fl_File_Chooser::CREATE, "Save As..." );
f.show();
while(f.shown()) {
	Fl::check();
}
if(0 >= f.count())
	return;

if(0 != savedata(f.value())) {
	// Error
}}
              xywh {0 0 23 17}
            }
            MenuItem {} {
              label {&Quit}
              callback {mainwindow->hide();}
              xywh {0 0 100 20} labelsize 14
            }
          }
        }
        Fl_Box fftchart {
          xywh {5 25 800 495} resizable
          code0 {o->type(FL_LINE_CHART);}
          class Fl_Chart
        }
        Fl_Input_Choice columnchoice {
          label {DB Column}
          callback {printf("Chose %s\\n", o->value());
loaddata(o->value());} open
          xywh {60 550 120 25} labelsize 10 when 1
        } {}
        Fl_Value_Slider i_min {
          label {Imaginary Min}
          callback {renderplotdata();}
          xywh {185 525 200 20} type {Horz Knob} labelsize 10 step 0.0001 hide
        }
        Fl_Value_Slider i_max {
          label {Imaginary Max}
          callback {renderplotdata();}
          xywh {185 560 200 20} type {Horz Knob} labelsize 10 step 0.0001 value 1 hide
        }
        Fl_Value_Slider rad_min {
          label {Amplitude Min}
          callback {thereandbackagain();
renderplotdata();}
          xywh {480 550 280 20} type {Horz Knob} labelsize 10 step 0.0001
        }
        Fl_Value_Slider rad_max {
          label {Amplitude Max}
          callback {thereandbackagain();
renderplotdata();}
          xywh {480 585 280 20} type {Horz Knob} labelsize 10 step 0.0001 value 1
        }
        Fl_Value_Slider r_min {
          label {Real Min}
          callback {renderplotdata();}
          xywh {395 525 200 20} type {Horz Knob} labelsize 10 step 0.0001 hide
        }
        Fl_Value_Slider r_max {
          label {Real Max}
          callback {renderplotdata();}
          xywh {395 560 200 20} type {Horz Knob} labelsize 10 step 0.0001 value 1 hide
        }
        Fl_Value_Slider freq_min {
          label {Frequency Min}
          callback {thereandbackagain();
renderplotdata();}
          xywh {185 550 280 20} type {Horz Knob} labelsize 10 step 0.0001
        }
        Fl_Value_Slider freq_max {
          label {Frequency Max}
          callback {thereandbackagain();
renderplotdata();}
          xywh {185 585 280 20} type {Horz Knob} labelsize 10 step 0.0001 value 1
        }
        Fl_Button {} {
          label Reset
          callback {resetsliders();}
          xywh {115 585 60 20} labelsize 12
        }
        Fl_Value_Slider graphstart {
          label {Graph Start}
          callback {renderplotdata();}
          xywh {65 515 310 20} type {Horz Knob} labelsize 10 align 4
        }
        Fl_Value_Slider graphend {
          label {Graph End}
          callback {renderplotdata();}
          xywh {440 515 310 20} type {Horz Knob} labelsize 10 align 8 value 1
        }
      }
    }
    code {loadfftwwisdom();

plans_prepared = 0;

db = NULL;

rawdata = NULL;
plotdata = NULL;
transformeddata = NULL;
dataitems = 0;} {}
  }
  Function {~FFTOBD()} {} {
    code {closedb();
freedata();

savefftwwisdom();} {}
  }
  Function {show(int argc, char **argv)} {} {
    code {mainwindow->show(argc,argv);} {}
  }
  Function {opendb(const char *dbfilename)} {private return_type int
  } {
    code {if(NULL != db) {
	closedb();
}

int rc;
rc = sqlite3_open_v2(dbfilename, &db, SQLITE_OPEN_READONLY, NULL);

if(SQLITE_OK != rc) {
	fprintf(stderr, "Can't open database %s: %s\\n", dbfilename, sqlite3_errmsg(db));
	sqlite3_close(db);
	return 1;
}

columnchoice->clear();

sqlite3_stmt *pragma_stmt; // The stmt for gathering table_info
const char *dbend; // ignored handle for sqlite

rc = sqlite3_prepare_v2(db, "PRAGMA table_info(obd)", -1, &pragma_stmt, &dbend);

if(SQLITE_OK != rc) {
	fprintf(stderr, "Couldn't get table info in database %s (%i): %s\\n", dbfilename, rc, sqlite3_errmsg(db));
	return 1;
}

while(SQLITE_ROW == sqlite3_step(pragma_stmt)) {
	const char *columnname = (const char *)sqlite3_column_text(pragma_stmt, 1);
	if(0 != strcmp(columnname, "time")) {
		columnchoice->add(columnname);
	}
}

columnchoice->value(0);

sqlite3_finalize(pragma_stmt);

loaddata(columnchoice->value());

return 0;} {}
  }
  Function {opencsv(const char *csvfilename)} {private return_type int
  } {
    code {FILE *csvfile = fopen(csvfilename, "r");
if(NULL == csvfile) {
	perror(csvfilename);
	return 1;
}

if(NULL != db) {
	closedb();
}

columnchoice->clear();

int rc;
rc = sqlite3_open(":memory:", &db);

if(SQLITE_OK != rc) {
	fprintf(stderr, "Can't create memory database: %s\\n", sqlite3_errmsg(db));
	sqlite3_close(db);
	return 1;
}



const char create_sql[] = "CREATE TABLE obd (data REAL)";
char *errmsg;
rc = sqlite3_exec(db, create_sql, NULL, NULL, &errmsg);

if(SQLITE_OK != rc) {
	fprintf(stderr, "Error creating table \\"%s\\" (%i): %s\\n", create_sql, rc, errmsg);
	sqlite3_free(errmsg);
}

sqlite3_stmt *stmt;

const char insert_sql[] = "INSERT INTO obd (data) VALUES (?)";

const char *dbend;

rc = sqlite3_prepare_v2(db, insert_sql, -1, &stmt, &dbend);

if(SQLITE_OK != rc) {
	fprintf(stderr, "Errr preparing insert stmt \\"%s\\" (%i): %s\\n", insert_sql, rc, sqlite3_errmsg(db));
	return 1;
}

char line[1024];
while(NULL != fgets(line, sizeof(line), csvfile)) {
	float item;
	if(0 < sscanf(line, "%f", &item)) {
		sqlite3_bind_double(stmt, 1, item);
		sqlite3_step(stmt);
		sqlite3_reset(stmt);
	}
}

fclose(csvfile);


columnchoice->add("data");

columnchoice->value(0);

loaddata(columnchoice->value());

return 0;} {}
  }
  Function {savedata(const char *filename)} {open private return_type int
  } {
    code {if(0 == dataitems || NULL == plotdata) {
	return 1;
}

FILE *f = fopen(filename, "w");
if(NULL == f) {
	perror(filename);
	return 1;
}

fprintf(f, "Original %s,Filtered %s,,Frequency: %f - %f,Amplitude: %f - %f\\n",
	columnchoice->value(), columnchoice->value(),
	freq_min->value(), freq_max->value(),
	rad_min->value(), rad_max->value()
	);

int i;
for(i=0; i<dataitems; i++) {
	fprintf(f, "%f,%f\\n", rawdata[i][0], plotdata[i][0]);
}

fclose(f);

return 0;} {selected
    }
  }
  Function {closedb()} {private
  } {
    code {if(NULL != db) {
	sqlite3_close(db);
}} {}
  }
  Function {loaddata(const char *columnname)} {private return_type int
  } {
    code {if(NULL == db) {
	fprintf(stderr, "Can't populate data without an open database\\n");
	return 1;
}

freedata();

sqlite3_stmt *stmt;

const char sql[] = "SELECT (%s) FROM obd";

char actual_sql[256];

snprintf(actual_sql, sizeof(actual_sql), sql, columnname);

int rc;
const char *dbend;

rc = sqlite3_prepare_v2(db, actual_sql, -1, &stmt, &dbend);
if(SQLITE_OK != rc) {
	fprintf(stderr, "Couldn't prepare statement \\"%s\\" (%i): %s\\n", actual_sql, rc, sqlite3_errmsg(db));
	return 1;
} else {
	printf("SQL: %s\\n", actual_sql);
}

int rowcount = 0;
while(SQLITE_ROW == sqlite3_step(stmt)) {
	rowcount++;
}

sqlite3_reset(stmt);

allocatedata(rowcount);

rowcount = 0;
while(SQLITE_ROW == sqlite3_step(stmt)) {
	rawdata[rowcount][0] = sqlite3_column_double(stmt, 0);
	rowcount++;
}

prepareplans();

memcpy(plotdata, rawdata, sizeof(fftw_complex) * rowcount);

renderplotdata();

sqlite3_finalize(stmt);

return 0;} {}
  }
  Function {freedata()} {private
  } {
    code {if(NULL != rawdata) {
	fftw_free(rawdata);
}

if(NULL != plotdata) {
	fftw_free(plotdata);
}

if(NULL != transformeddata) {
	fftw_free(transformeddata);
}

plotdata = NULL;
rawdata = NULL;
transformeddata = NULL;
dataitems = 0;} {}
  }
  Function {allocatedata(int numitems)} {private
  } {
    code {freedata();

dataitems = numitems;

int bufsize = sizeof(fftw_complex) * numitems;

rawdata = (fftw_complex *)fftw_malloc(bufsize);
plotdata = (fftw_complex *)fftw_malloc(bufsize);
transformeddata = (fftw_complex *)fftw_malloc(bufsize);

memset(rawdata, 0, bufsize);
memset(plotdata, 0, bufsize);
memset(transformeddata, 0, bufsize);} {}
  }
  Function {renderplotdata()} {private
  } {
    code {if(NULL == plotdata || dataitems == 0) {
	return;
}

double datamin = plotdata[0][0];
double datamax = plotdata[0][0];

fftchart->clear();

int i;

for(i=dataitems * graphstart->value(); i<dataitems * graphend->value(); i++) {
	double p = plotdata[i][0];
	fftchart->add(p);

	if(p > datamax) datamax = p;
	if(p < datamin) datamin = p;
}

fftchart->bounds(datamin, datamax);
Fl::redraw();} {}
  }
  Function {loadfftwwisdom()} {private
  } {
    code {FILE *wisdom;
wisdom = fopen("fftwwisdom", "r");
if(NULL != wisdom) {
	fftw_import_wisdom_from_file(wisdom);
	printf("Wisdom imported\\n");
	fclose(wisdom);
}} {}
  }
  Function {savefftwwisdom()} {private
  } {
    code {FILE *wisdom;
wisdom = fopen("fftwwisdom", "w");
if(NULL != wisdom) {
	fftw_export_wisdom_to_file(wisdom);
	printf("Wisdom exported\\n");
	fclose(wisdom);
}} {}
  }
  Function {destroyplans()} {private
  } {
    code {if(plans_prepared) {
	fftw_destroy_plan(ff_forward);
	fftw_destroy_plan(ff_backward);
	plans_prepared = 0;
}} {}
  }
  Function {prepareplans()} {open private
  } {
    code {if(plans_prepared) {
	destroyplans();
}

printf("About to prepare plans. This can take some time\\n");

ff_forward = fftw_plan_dft_1d(dataitems, rawdata, transformeddata, FFTW_FORWARD, FFTW_ESTIMATE);
ff_backward = fftw_plan_dft_1d(dataitems, transformeddata, plotdata, FFTW_BACKWARD, FFTW_ESTIMATE);

plans_prepared = 1;} {}
  }
  Function {thereandbackagain()} {open private
  } {
    code {fftw_execute(ff_forward);

// Filter the data here
int i;

// Do this in two sweeps.

// First sweep, get the min and max along each axis
// Second sweep, purge the data

// double data_i_min, data_i_max; // Imaginary min and max of data
// double data_r_min, data_r_max; // Real min and max of data
double data_rad_min2, data_rad_max2; // Min and max radius sq'd of data

// effectively bend the cutoff curve to be more sensiotive at the bottom
const float bendcurve = 1.0;

/*
data_i_min = data_i_max = transformeddata[0][1];
data_r_min = data_r_max = transformeddata[0][0];
*/
data_rad_min2 = data_rad_max2 = transformeddata[0][1] * transformeddata[0][1] +
			transformeddata[0][0] * transformeddata[0][0];

for(i=1; i<dataitems; i++) {
/*
	if(data_i_max < transformeddata[i][1]) data_i_max = transformeddata[i][1];
	if(data_i_min > transformeddata[i][1]) data_i_min = transformeddata[i][1];

	if(data_r_max < transformeddata[i][0]) data_r_max = transformeddata[i][0];
	if(data_r_min > transformeddata[i][0]) data_r_min = transformeddata[i][0];

*/

	double rad2 = transformeddata[i][1] * transformeddata[i][1] +
			transformeddata[i][0] * transformeddata[i][0];
	if(data_rad_max2 < rad2) data_rad_max2 = rad2;
	if(data_rad_min2 > rad2) data_rad_min2 = rad2;
}
/*
printf("R: %f,%f\\nI: %f,%f\\nQ: %f,%f\\n",
	data_r_min, data_r_max,
	data_i_min, data_i_max,
	data_rad_min2, data_rad_max2);
*/


for(i=0; i<dataitems*pow(freq_min->value(),bendcurve); i++) {
	transformeddata[i][0] = transformeddata[i][1] = 0;
}
for(i=dataitems*pow(freq_max->value(),bendcurve); i<dataitems; i++) {
	transformeddata[i][0] = transformeddata[i][1] = 0;
}

/*
double i_mincutoff = pow(i_min->value(),bendcurve) * max(fabs(data_i_max), fabs(data_i_min));
double i_maxcutoff = pow(i_max->value(),bendcurve) * max(fabs(data_i_max), fabs(data_i_min));

double r_mincutoff = pow(r_min->value(),bendcurve) * max(fabs(data_r_max), fabs(data_r_min));
double r_maxcutoff = pow(r_max->value(),bendcurve) * max(fabs(data_r_max), fabs(data_r_min));
*/

double rad_mincutoff = pow(rad_min->value(),bendcurve) * max(fabs(data_rad_max2), fabs(data_rad_min2));
double rad_maxcutoff = pow(rad_max->value(),bendcurve) * max(fabs(data_rad_max2), fabs(data_rad_min2));

for(i=0; i<dataitems; i++) {
	double rad2 = transformeddata[i][1] * transformeddata[i][1] +
			transformeddata[i][0] * transformeddata[i][0];
	if(rad2 > rad_maxcutoff) {
		transformeddata[i][0] = transformeddata[i][1] = 0;
	}
	if(rad2 < rad_mincutoff) {
		transformeddata[i][0] = transformeddata[i][1] = 0;
	}
	
/*	if(fabs(transformeddata[i][1]) > i_maxcutoff) {
		transformeddata[i][0] = transformeddata[i][1] = 0;
	}
	if(fabs(transformeddata[i][1]) < i_mincutoff) {
		transformeddata[i][0] = transformeddata[i][1] = 0;
	}

	if(fabs(transformeddata[i][0]) > r_maxcutoff) {
		transformeddata[i][0] = transformeddata[i][1] = 0;
	}
	if(fabs(transformeddata[i][0]) < r_mincutoff) {
		transformeddata[i][0] = transformeddata[i][1] = 0;
	}
*/
}

fftw_execute(ff_backward);

// Artifact of dft: the output is scaled by the size of the array 
for(i=0; i<dataitems; i++) {
	plotdata[i][0] /= dataitems;
	plotdata[i][1] /= dataitems;
}} {}
  }
  Function {resetsliders()} {private
  } {
    code {i_max->value(1.0);
i_min->value(0.0);

r_max->value(1.0);
r_min->value(0.0);

rad_max->value(1.0);
rad_min->value(0.0);

freq_max->value(1.0);
freq_min->value(0.0);

graphend->value(1.0);
graphstart->value(0.0);

thereandbackagain();
renderplotdata();} {}
  }
} 
