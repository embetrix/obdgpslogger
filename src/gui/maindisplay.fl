# data file for the Fltk User Interface Designer (fluid)
version 1.0109 
header_name {.h} 
code_name {.cxx}
decl {\#include <stdio.h>} {} 

decl {\#include <unistd.h>} {} 

decl {\#include "logwindow.h"} {public
} 

decl {\#include "loggerhandler.h"} {public
} 

decl {\#include "convertwindow.h"} {} 

decl {class obdconvertwindow;} {public
} 

decl {\#include "obdgui.h"} {public
} 

comment {Button "state machine":
1) Execution begins.
    Go button active
    start and end inactive
2) Click "Go"
    Go button changes to "starting...", inactive
    start and end still inactive
3) Once logger is running
    Change go button to "Stop", active
    make start active. end still inactive
4a) Clicking start
     make start inactive, end active
4b) Clicking end
     make start active, end inactive
5) Click "Stop"} {in_source not_in_header
} 

class OBDUI {open
} {
  Function {OBDUI()} {open
  } {
    code {mLH = NULL;} {}
    Fl_Window MainWindow {
      label {OBD GPS Logger} open
      private xywh {829 240 605 370} type Double align 80 hide resizable
    } {
      Fl_Group vss_group {
        private xywh {25 105 145 85}
      } {
        Fl_Dial vss_dial {
          label {Vehicle Speed}
          private xywh {25 105 145 85} type Line deactivate
          code0 {o->range(0,200);}
        }
        Fl_Value_Output vss_value {
          private xywh {75 161 45 24} deactivate
        }
      }
      Fl_Group rpm_group {
        private xywh {230 105 145 85}
      } {
        Fl_Dial rpm_dial {
          label {Engine RPM}
          private xywh {230 105 145 85} type Line deactivate
          code0 {o->range(0,7000);}
        }
        Fl_Value_Output rpm_value {
          private xywh {280 161 45 24} deactivate
        }
      }
      Fl_Group maf_group {
        private xywh {435 105 145 85}
      } {
        Fl_Dial maf_dial {
          label {Mass Airflow}
          private xywh {435 105 145 85} type Line deactivate
          code0 {o->range(0,14000);}
        }
        Fl_Value_Output maf_value {
          private xywh {485 161 45 24} deactivate
        }
      }
      Fl_Group throttlepos_group {
        private xywh {130 215 145 85}
      } {
        Fl_Dial throttlepos_dial {
          label {Throttle Position}
          private xywh {130 215 145 85} type Line deactivate
          code0 {o->range(0,200);}
        }
        Fl_Value_Output throttlepos_value {
          private xywh {180 271 45 24} deactivate
        }
      }
      Fl_Group temp_group {
        private xywh {325 215 145 85}
      } {
        Fl_Dial temp_dial {
          label {Oil Temperature}
          private xywh {325 215 145 85} type Line deactivate
          code0 {o->range(0,200);}
        }
        Fl_Value_Output temp_value {
          private xywh {375 271 45 24} deactivate
        }
      }
      Fl_Menu_Bar menubar {open
        private xywh {0 0 600 20} align 20
      } {
        Submenu {} {
          label File open
          private xywh {0 0 100 20}
        } {
          MenuItem {} {
            label Quit
            callback {MainWindow->hide();
mLogWindow->hide();}
            private xywh {0 0 100 20}
          }
        }
        Submenu {} {
          label Window open
          private xywh {0 0 100 20}
        } {
          MenuItem {} {
            label {Raw Output}
            callback {mLogWindow->show();}
            private xywh {0 0 100 20}
          }
        }
      }
      Fl_Group loggeroptions {selected
        private xywh {100 20 230 60}
      } {
        Fl_File_Input logfilename {
          label Logfile
          private xywh {100 20 230 30} labelsize 11 when 0 textsize 11
          code0 {logfilename->value(DEFAULT_DATABASE);}
        }
        Fl_File_Input serialfilename {
          label {OBD Serial Port}
          private xywh {100 50 230 30} labelsize 11 when 0 textsize 11
          code0 {serialfilename->value(DEFAULT_SERIAL_PORT);}
        }
      }
      Fl_Button gobutton {
        label Go
        callback {if(mLH) {
  if(TRIP_STOPPED != mTripState) {
    mLH->endtrip();
    sleep(1);
  }
  delete mLH;
  mLH = NULL;
  setUIRunning(UI_STOPPED);
} else {
  mLH = new loggerhandler(this);
  setUIRunning(UI_STARTING);
}}
        private xywh {340 25 120 45} resizable
      }
      Fl_Button starttripbutton {
        label {Start Trip}
        callback {if(mLH) {
  mLH->starttrip();
  setUIRunning(UI_STARTED, TRIP_STARTED);
}}
        private xywh {465 25 115 20} deactivate
      }
      Fl_Button endtripbutton {
        label {End Trip}
        callback {if(mLH) {
  mLH->endtrip();
  setUIRunning(UI_STARTED, TRIP_STOPPED);
}}
        private xywh {465 50 115 20} deactivate
      }
      Fl_Button convertbutton {
        label {Convert log  to ...}
        callback {mConvertWindow->show();}
        private xywh {395 340 155 25}
      }
    }
    code {setUIRunning(UI_STOPPED);} {}
    code {mLogWindow = new OBDLogWindow();
mLogWindow->hide();
mConvertWindow = new obdconvertwindow(this);
mConvertWindow->hide();
// mLogWindow->append_stdout("Cookies out");
// mLogWindow->append_stderr("Cookies err");} {}
    code {reset_dials();} {}
  }
  Function {~OBDUI()} {} {
    code {if(NULL != mLH) {
  delete mLH;
  mLH = NULL;
}
delete mLogWindow;
delete mConvertWindow;} {}
  }
  Function {setUIRunning(enum ui_state newstate, enum trip_state tripstate = TRIP_NONE)} {} {
    code {mUIState = newstate;
mTripState = tripstate;

switch(newstate) {
  case UI_STOPPED:
    gobutton->activate();
    gobutton->copy_label("Go");
    loggeroptions->activate();
    convertbutton->activate();
    reset_dials();
    break;
  case UI_STARTING:
    gobutton->deactivate();
    gobutton->copy_label("Starting...");
    loggeroptions->deactivate();
    convertbutton->deactivate();
    break;
  case UI_STARTED:
    gobutton->activate();
    gobutton->copy_label("Stop");
    loggeroptions->deactivate();
    convertbutton->deactivate();
    break;
}

switch(tripstate) {
  case TRIP_STOPPED:
    starttripbutton->activate();
    endtripbutton->deactivate();
    break;
  case TRIP_STARTED:
    starttripbutton->deactivate();
    endtripbutton->activate();
    break;
  case TRIP_NONE:
    starttripbutton->deactivate();
    endtripbutton->deactivate();
    break;
}} {}
  }
  Function {getOBDHandler()} {return_type {loggerhandler *}
  } {
    code {return mLH;} {}
  }
  Function {show(int argc, char **argv)} {} {
    code {MainWindow->show(argc,argv);} {}
  }
  Function {getLogfilename()} {return_type {const char *}
  } {
    code {return logfilename->value();} {}
  }
  Function {getSerialfilename()} {return_type {const char *}
  } {
    code {return serialfilename->value();} {}
  }
  Function {checkLogger()} {} {
    code {if(NULL != mLH) {
  mLH->checkRunning(false);

  if(!mLH->isUsable()) {
    delete mLH;
    mLH = NULL;
  }
}

if(NULL == mLH) {
  setUIRunning(UI_STOPPED);
} else {
  mLH->pulse();
  if(mLH->isStarted()) {
    if(mUIState == UI_STARTING) {
      setUIRunning(UI_STARTED, TRIP_STOPPED);
    }
  }
}} {}
  }
  Function {append_stderr_log(const char *text)} {} {
    code {// mLogWindow->append_stderr(text);} {}
  }
  Function {append_stdout_log(const char *text)} {} {
    code {// mLogWindow->append_stdout(text);} {}
  }
  decl {loggerhandler *mLH;} {}
  decl {enum ui_state mUIState;} {}
  decl {enum trip_state mTripState;} {}
  decl {OBDLogWindow *mLogWindow;} {}
  decl {obdconvertwindow *mConvertWindow;} {}
  Function {reset_dials()} {} {
    code {setvss(vss_dial->minimum());
setrpm(rpm_dial->minimum());
setmaf(maf_dial->minimum());
setthrottlepos(throttlepos_dial->minimum());
settemp(temp_dial->minimum());} {}
  }
  Function {setvss(float val)} {} {
    code {vss_dial->value(val);
vss_value->value(val);} {}
  }
  Function {setrpm(float val)} {} {
    code {rpm_dial->value(val);
rpm_value->value(val);} {}
  }
  Function {setmaf(float val)} {} {
    code {maf_dial->value(val);
maf_value->value(val);} {}
  }
  Function {setthrottlepos(float val)} {} {
    code {throttlepos_dial->value(val);
throttlepos_value->value(val);} {}
  }
  Function {settemp(float val)} {} {
    code {temp_dial->value(val);
temp_value->value(val);} {}
  }
} 
