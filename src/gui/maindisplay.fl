# data file for the Fltk User Interface Designer (fluid)
version 1.0109 
header_name {.h} 
code_name {.cxx}
decl {\#include <stdio.h>} {} 

decl {\#include "loggerhandler.h"} {public
} 

decl {\#include "obdgui.h"} {public
} 

comment {/*

Button "state machine":
1) Execution begins.
    Go button active
    start and end inactive
2) Click "Go"
    Go button changes to "starting...", inactive
    start and end still inactive
3) Once logger is running
    Change go button to "Stop", active
    make start active. end still inactive
4a) Clicking start
     make start inactive, end active
4b) Clicking end
     make start active, end inactive
5) Click "Stop"


*/} {in_source not_in_header
} 

class OBDUI {open
} {
  Function {OBDUI()} {open
  } {
    code {mLH = NULL;} {}
    Fl_Window MainWindow {open
      xywh {801 330 605 370} type Double align 80 resizable visible
    } {
      Fl_Dial vss {
        label {Vehicle Speed}
        xywh {25 105 145 85} type Line deactivate
        code0 {vss->range(0,200);}
      }
      Fl_Dial rpm {
        label {Engine RPM}
        xywh {230 105 145 85} type Line deactivate
        code0 {rpm->range(0,7000);}
      }
      Fl_Dial maf {
        label {Mass Airflow}
        xywh {435 105 145 85} type Line deactivate
        code0 {maf->range(0,14000);}
      }
      Fl_Dial throttlepos {
        label {Throttle Position}
        xywh {130 215 145 85} type Line deactivate
        code0 {throttlepos->range(0,200);}
      }
      Fl_Dial temp {
        label {Oil Temperature}
        xywh {325 215 145 85} type Line deactivate
        code0 {temp->range(0,200);}
      }
      Fl_Menu_Bar menubar {open
        private xywh {0 0 600 20} align 20
      } {
        Submenu {} {
          label File open
          private xywh {0 0 100 20}
        } {
          MenuItem {} {
            label Quit
            callback {MainWindow->hide();}
            private xywh {0 0 100 20}
          }
        }
      }
      Fl_File_Input logfilename {
        label Logfile
        private xywh {100 20 230 30} labelsize 11 when 0 textsize 11
        code0 {logfilename->value(DEFAULT_DATABASE);}
      }
      Fl_File_Input serialfilename {
        label {OBD Serial Port}
        private xywh {100 50 230 30} labelsize 11 when 0 textsize 11
        code0 {serialfilename->value(DEFAULT_SERIAL_PORT);}
      }
      Fl_Button gobutton {
        label Go
        callback {if(mLH) {
  delete mLH;
  setUIRunning(UI_STOPPED);
} else {
  mLH = new loggerhandler(this);
  setUIRunning(UI_STARTING);
}}
        private xywh {340 25 120 45} resizable
      }
      Fl_Button starttripbutton {
        label {Start Trip}
        callback {if(mLH) {
  mLH->starttrip();
  setUIRunning(UI_STARTED, TRIP_STARTED);
}}
        private xywh {465 25 115 20} deactivate
      }
      Fl_Button endtripbutton {
        label {End Trip}
        callback {if(mLH) {
  mLH->endtrip();
  setUIRunning(UI_STARTED, TRIP_STOPPED);
}}
        private xywh {465 50 115 20} deactivate
      }
    }
    code {setUIRunning(UI_STOPPED);} {}
  }
  Function {~OBDUI()} {open
  } {
    code {if(NULL != mLH) {
  delete mLH;
}} {selected
    }
  }
  Function {setUIRunning(enum ui_state newstate, enum trip_state tripstate = TRIP_NONE)} {open
  } {
    code {mUIState = newstate;
mTripState = tripstate;

switch(newstate) {
  case UI_STOPPED:
    gobutton->activate();
    gobutton->copy_label("Go");
    break;
  case UI_STARTING:
    gobutton->deactivate();
    gobutton->copy_label("Starting...");
    break;
  case UI_STARTED:
    gobutton->activate();
    gobutton->copy_label("Stop");
    break;
}

switch(tripstate) {
  case TRIP_STOPPED:
    starttripbutton->activate();
    endtripbutton->deactivate();
    break;
  case TRIP_STARTED:
    starttripbutton->deactivate();
    endtripbutton->activate();
    break;
  case TRIP_NONE:
    starttripbutton->deactivate();
    endtripbutton->deactivate();
    break;
}} {}
  }
  Function {getOBDHandler()} {open return_type {loggerhandler *}
  } {
    code {return mLH;} {}
  }
  Function {show(int argc, char **argv)} {open
  } {
    code {MainWindow->show(argc,argv);} {}
  }
  Function {getLogfilename()} {open return_type {const char *}
  } {
    code {return logfilename->value();} {}
  }
  Function {getSerialfilename()} {open return_type {const char *}
  } {
    code {return serialfilename->value();} {}
  }
  Function {checkLogger()} {open
  } {
    code {if(NULL != mLH) {
  mLH->checkRunning(false);

  if(!mLH->isUsable()) {
    delete mLH;
    mLH = NULL;
  }
}

if(NULL == mLH) {
  setUIRunning(UI_STOPPED);
} else {
  mLH->pulse();
  if(mLH->isStarted()) {
    if(mUIState == UI_STARTING) {
      setUIRunning(UI_STARTED, TRIP_STOPPED);
    }
  }
}} {}
  }
  decl {loggerhandler *mLH;} {}
  decl {enum ui_state mUIState;} {}
  decl {enum trip_state mTripState;} {}
} 
