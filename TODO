Build system:

OSX: Figure out how to build app bundle out of obdgui, install
binaries inside it.
Add the path to the binaries inside the app bundle to PATH before
attempting to execute everything. Might need a #ifdef OSX in obdgui?

Create a config.h type file instead of lots of -D ADD_DEFINITION
macros. Strings like DEFAULT_SERIALPORT break XCode files generated
by CMake.


obdgpslogger:

Configuration file
 - serial port for OBD device
 - any other parameters?

Trouble codes?


obd2kml:

Add more graphs? What's useful?

Fix progress reporting while drawing individual graphs


obdgui:

occasional bug in starting/stopping trips? [Don't know if it still
exists; clicking start trip stops the gui from reading/parsing/displaying
new data]

Better shortcuts. Alt-F4/Apple-Q/Ctrl-Q should quit. Probably not escape.


obd2osm:

OpenStreetMap possibilities:

1) Doing stuff the "right" [ish] way
Download multiple .osm segments to encompass the whole area of a trip
 http://www.openstreetmap.org/api/0.5/map?bbox=-0.5,51.3,-0.4,51.4
 bbox params are WEST, SOUTH, EAST, NORTH

Export trip data as a .osm file if can figure out how to render an
overlay using it. Just marking stuff as "road" won't work.

This bit may not be necessary if osmarender lets you have different
rules with different files:
Use Osmosis to combine .osm segments and trip .osm file into single .osm file
 http://wiki.openstreetmap.org/wiki/Osmosis
 osmosis --rx file2.osm --rx file1.osm --m --wx merged.osm

Use osmarender to render .osm file to useful output
 http://wiki.openstreetmap.org/wiki/Osmarender

2) Still working off raw OSM data
Same as #1, but use osmarender to create tiles then draw overlay ourselves
using, eg, imagemagick or libsvg or something.

3) Piggyback someone else for all the hard stuff
Download rendered tiles from openstreetmap directly, overlay our trace
on top of it, using general purpose image editing libraries

Might be a bad idea, since you're mostly borrowing bandwidth from
OSM. On the plus side, it'd be easy.
